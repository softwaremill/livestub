package sttp.livestub.app.openapi

import cats.syntax.all._
import com.typesafe.scalalogging.StrictLogging
import sttp.livestub.api._
import sttp.livestub.openapi.OpenapiModels.{OpenapiPath, OpenapiResponseContent, ResponseStatusCode}
import sttp.livestub.openapi.OpenapiParamType
import sttp.model.{MediaType, StatusCode}

import scala.collection.immutable.ListSet

class OpenapiStubsCreator(generator: RandomValueGenerator) extends StrictLogging {
  def apply(
      paths: List[OpenapiPath]
  ): List[(RequestStubIn, Response)] = {
    paths.flatMap { path =>
      path.methods.flatMap { method =>
        method.responses.headOption.map { firstResponse =>
          val requestStub = RequestStubIn(
            MethodStub.FixedMethod(method.methodType),
            RequestPathAndQuery
              .fromString(path.url.replaceAll("\\{\\w+\\}", "*"))
              .copy(queries =
                ListSet(
                  method.parameters
                    .filter(p => p.in == OpenapiParamType.Query)
                    .map(query => QueryElement.WildcardValueQuery(query.name, query.required.getOrElse(false))): _*
                )
              )
          )
          val autoGeneratedObjects = firstResponse.content
            .collectFirst { case OpenapiResponseContent(MediaType.ApplicationJson, schema) => schema }
            .traverse(generator.nextRandom)
          val responseStatusCode = firstResponse.code match {
            case ResponseStatusCode.Fixed(code) => code
            case ResponseStatusCode.Default     => StatusCode.Ok
          }
          autoGeneratedObjects match {
            case Left(reason) =>
              logger.warn(
                s"Couldn't generate response object for $requestStub because of $reason. This endpoint will emit empty responses"
              )
              requestStub -> Response(None, responseStatusCode)
            case Right(body) => requestStub -> Response(body, responseStatusCode)
          }
        }
      }
    }
  }
}
